{"remainingRequest":"/home/luca/Desktop/RIOT-GreenHouse/WebInterface/node_modules/babel-loader/lib/index.js!/home/luca/Desktop/RIOT-GreenHouse/WebInterface/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/luca/Desktop/RIOT-GreenHouse/WebInterface/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/luca/Desktop/RIOT-GreenHouse/WebInterface/src/components/Sensors.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/luca/Desktop/RIOT-GreenHouse/WebInterface/src/components/Sensors.vue","mtime":1617183770743},{"path":"/home/luca/Desktop/RIOT-GreenHouse/WebInterface/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/luca/Desktop/RIOT-GreenHouse/WebInterface/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/luca/Desktop/RIOT-GreenHouse/WebInterface/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/luca/Desktop/RIOT-GreenHouse/WebInterface/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0IE15R3JhcGggZnJvbSAiQC9jb21wb25lbnRzL015R3JhcGgiOwoKdmFyIGF4aW9zID0gcmVxdWlyZSgnYXhpb3MnKS5kZWZhdWx0OwoKaW1wb3J0IE1pbk1heEF2ZyBmcm9tICJAL2NvbXBvbmVudHMvTWluTWF4QXZnIjsKaW1wb3J0IG1vbWVudCBmcm9tICJtb21lbnQiOwppbXBvcnQgQnV0dG9uUGFuZWwgZnJvbSAiQC9jb21wb25lbnRzL0J1dHRvblBhbmVsIjsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICJTZW5zb3JzIiwKICBjb21wb25lbnRzOiB7CiAgICBCdXR0b25QYW5lbDogQnV0dG9uUGFuZWwsCiAgICBNeUdyYXBoOiBNeUdyYXBoLAogICAgTWluTWF4QXZnOiBNaW5NYXhBdmcKICB9LAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBmZXRjaF9kYXRhX3VybDogImh0dHBzOi8vcDRhejN4bTNnZi5leGVjdXRlLWFwaS51cy1lYXN0LTEuYW1hem9uYXdzLmNvbS9kZWZhdWx0L2dyZWVuSG91c2VEYXRhSlMiLAogICAgICByZWNlaXZlZF9kYXRhOiBbXSwKICAgICAgbGFzdF91cGRhdGU6IHt9LAogICAgICBURU1QX0NPTE9SOiAiI2VmNDc2ZiIsCiAgICAgIEhVTUlESVRZX0NPTE9SOiAiI2ZmZDE2NiIsCiAgICAgIFNPSUxfQ09MT1I6ICIjMDZkNmEwIgogICAgfTsKICB9LAogIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQoKSB7CiAgICB0aGlzLmxvYWREYXRhKCk7CiAgfSwKICBtZXRob2RzOiB7CiAgICBmb3JtYXRUaW1lc3RhbXA6IGZ1bmN0aW9uIGZvcm1hdFRpbWVzdGFtcCh0cykgewogICAgICByZXR1cm4gbW9tZW50KHRzKS5mb3JtYXQoIkxMTCIpOwogICAgfSwKICAgIGxvYWREYXRhOiBmdW5jdGlvbiBsb2FkRGF0YSgpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIGF4aW9zLnBvc3QodGhpcy4kZGF0YS5mZXRjaF9kYXRhX3VybCkudGhlbihmdW5jdGlvbiAoZCkgewogICAgICAgIF90aGlzLiRkYXRhLnJlY2VpdmVkX2RhdGEgPSBkLmRhdGEuSXRlbXM7CgogICAgICAgIHZhciBvcmRlcmVkX3JlY2VpdmVkX2RhdGEgPSBfdGhpcy4kZGF0YS5yZWNlaXZlZF9kYXRhLnNvcnQoZnVuY3Rpb24gKHgsIHkpIHsKICAgICAgICAgIGlmICh4LnRpbWVzdGFtcCA8IHkudGltZXN0YW1wKSByZXR1cm4gLTE7ZWxzZSBpZiAoeC50aW1lc3RhbXAgPiB5LnRpbWVzdGFtcCkgcmV0dXJuIDE7ZWxzZSByZXR1cm4gMDsKICAgICAgICB9KTsKCiAgICAgICAgX3RoaXMuJGRhdGEubGFzdF91cGRhdGUgPSBvcmRlcmVkX3JlY2VpdmVkX2RhdGFbb3JkZXJlZF9yZWNlaXZlZF9kYXRhLmxlbmd0aCAtIDFdOwogICAgICB9KTsKICAgIH0KICB9Cn07"},{"version":3,"sources":["Sensors.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA,OAAA,OAAA,MAAA,sBAAA;;AAEA,IAAA,KAAA,GAAA,OAAA,CAAA,OAAA,CAAA,CAAA,OAAA;;AAEA,OAAA,SAAA,MAAA,wBAAA;AACA,OAAA,MAAA,MAAA,QAAA;AACA,OAAA,WAAA,MAAA,0BAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,SADA;AAEA,EAAA,UAAA,EAAA;AACA,IAAA,WAAA,EAAA,WADA;AAEA,IAAA,OAAA,EAAA,OAFA;AAGA,IAAA,SAAA,EAAA;AAHA,GAFA;AAOA,EAAA,IAAA,EAAA,gBAAA;AACA,WAAA;AACA,MAAA,cAAA,EAAA,iFADA;AAEA,MAAA,aAAA,EAAA,EAFA;AAGA,MAAA,WAAA,EAAA,EAHA;AAIA,MAAA,UAAA,EAAA,SAJA;AAKA,MAAA,cAAA,EAAA,SALA;AAMA,MAAA,UAAA,EAAA;AANA,KAAA;AAQA,GAhBA;AAiBA,EAAA,OAjBA,qBAiBA;AACA,SAAA,QAAA;AACA,GAnBA;AAoBA,EAAA,OAAA,EAAA;AACA,IAAA,eADA,2BACA,EADA,EACA;AACA,aAAA,MAAA,CAAA,EAAA,CAAA,CAAA,MAAA,CAAA,KAAA,CAAA;AACA,KAHA;AAIA,IAAA,QAJA,sBAIA;AAAA;;AACA,MAAA,KAAA,CAAA,IAAA,CAAA,KAAA,KAAA,CAAA,cAAA,EACA,IADA,CACA,UAAA,CAAA,EAAA;AACA,QAAA,KAAA,CAAA,KAAA,CAAA,aAAA,GAAA,CAAA,CAAA,IAAA,CAAA,KAAA;;AAEA,YAAA,qBAAA,GAAA,KAAA,CAAA,KAAA,CAAA,aAAA,CAAA,IAAA,CAAA,UAAA,CAAA,EAAA,CAAA,EAAA;AACA,cAAA,CAAA,CAAA,SAAA,GAAA,CAAA,CAAA,SAAA,EAAA,OAAA,CAAA,CAAA,CAAA,KACA,IAAA,CAAA,CAAA,SAAA,GAAA,CAAA,CAAA,SAAA,EAAA,OAAA,CAAA,CAAA,KACA,OAAA,CAAA;AACA,SAJA,CAAA;;AAKA,QAAA,KAAA,CAAA,KAAA,CAAA,WAAA,GAAA,qBAAA,CAAA,qBAAA,CAAA,MAAA,GAAA,CAAA,CAAA;AAEA,OAXA;AAYA;AAjBA;AApBA,CAAA","sourcesContent":["<template>\n  <div>\n    <MinMaxAvg title=\"Temperature\" unit=\"Â°C\" :color=\"this.TEMP_COLOR\" v-bind:data=\"this.$data.received_data.map(x=>x.temperature)\"></MinMaxAvg>\n    <MinMaxAvg title=\"Humidity\" unit=\"%\" :color=\"this.HUMIDITY_COLOR\" v-bind:data=\"this.$data.received_data.map(x=>x.humidity)\"></MinMaxAvg>\n    <MinMaxAvg title=\"Soil moisture\" unit=\"%\" :color=\"this.SOIL_COLOR\" v-bind:data=\"this.$data.received_data.map(x=>x.soil)\"></MinMaxAvg>\n    <br>\n    <p><b>Last update: </b>{{ this.formatTimestamp(this.$data.last_update.timestamp) }}</p>\n    <p><b>Water level: </b>{{ this.$data.last_update.water_level }}%</p>\n    <p><b>Window: </b>{{ this.$data.last_update.servo == 180 ? 'open' : 'close' }}</p>\n    <p><b>Pump state: </b>{{ this.$data.last_update.pump == 1 ? 'on' : 'off' }}</p>\n\n    <ButtonPanel></ButtonPanel>\n    <div style=\"display: flex; flex-direction: row;\">\n\n      <my-graph style=\"flex: 30%\" v-bind:values=\"this.$data.received_data.map(x=>x.temperature)\"\n                v-bind:ts=\"this.$data.received_data.map(x=>x.timestamp)\" name=\"Temperature\" :color=\"this.TEMP_COLOR\">\n      </my-graph>\n\n      <my-graph style=\"flex: 30%\" v-bind:values=\"this.$data.received_data.map(x=>x.humidity)\"\n                v-bind:ts=\"this.$data.received_data.map(x=>x.timestamp)\" name=\"Humidity\" :color=\"this.HUMIDITY_COLOR\">\n      </my-graph>\n\n      <my-graph style=\"flex: 30%\" v-bind:values=\"this.$data.received_data.map(x=>x.soil)\"\n                v-bind:ts=\"this.$data.received_data.map(x=>x.timestamp)\" name=\"Soil moisture\" :color=\"this.SOIL_COLOR\">\n      </my-graph>\n\n    </div>\n  </div>\n</template>\n\n<script>\n\nimport MyGraph from \"@/components/MyGraph\";\n\nconst axios = require('axios').default;\n\nimport MinMaxAvg from \"@/components/MinMaxAvg\";\nimport moment from \"moment\"\nimport ButtonPanel from \"@/components/ButtonPanel\";\n\nexport default {\n  name: \"Sensors\",\n  components: {\n    ButtonPanel,\n    MyGraph,\n    MinMaxAvg,\n  },\n  data: function () {\n    return {\n      fetch_data_url: \"https://p4az3xm3gf.execute-api.us-east-1.amazonaws.com/default/greenHouseDataJS\",\n      received_data: [],\n      last_update: {},\n      TEMP_COLOR: \"#ef476f\",\n      HUMIDITY_COLOR: \"#ffd166\",\n      SOIL_COLOR: \"#06d6a0\"\n    }\n  },\n  mounted() {\n    this.loadData()\n  },\n  methods: {\n    formatTimestamp(ts) {\n      return moment(ts).format(\"LLL\")\n    },\n    loadData() {\n      axios.post(this.$data.fetch_data_url)\n          .then(d => {\n            this.$data.received_data = d.data.Items\n\n            const ordered_received_data = this.$data.received_data.sort((x, y) => {\n              if (x.timestamp < y.timestamp) return -1;\n              else if (x.timestamp > y.timestamp) return 1;\n              else return 0\n            })\n            this.$data.last_update = ordered_received_data[ordered_received_data.length - 1];\n\n          })\n    }\n  }\n}\n</script>\n\n<style scoped>\n\n</style>"],"sourceRoot":"src/components"}]}